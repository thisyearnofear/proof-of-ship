rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Projects - public read, controlled write
    match /projects/{projectId} {
      // Public read access for project listings and details
      allow read: if isProjectPublic(projectId) || isProjectOwner(projectId) || isAdminUser();
      
      // Only project owners can update their projects
      allow update: if isProjectOwner(projectId) || isAdminUser();
      
      // Only admins can create/delete projects
      allow create, delete: if isAdminUser();
    }

    // User profiles are readable by the user themselves
    match /users/{userId} {
      // Allow users to read and update their own profiles
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Pending permissions collection
    match /pendingPermissions/{permissionId} {
      // Only admins can write, authenticated users can read
      allow read: if isAuthenticated();
      allow write: if isAdminUser();
    }

    // Helper functions for access control
    function isProjectOwner(projectId) {
      let userId = request.auth.uid;
      return request.auth != null &&
             exists(/databases/$(database)/documents/projects/$(projectId)) &&
             get(/databases/$(database)/documents/projects/$(projectId)).data.owners.hasAny([userId]);
    }
    
    function isProjectPublic(projectId) {
      return exists(/databases/$(database)/documents/projects/$(projectId)) &&
             'isPublic' in get(/databases/$(database)/documents/projects/$(projectId)).data &&
             get(/databases/$(database)/documents/projects/$(projectId)).data.isPublic == true;
    }
    
    function isAdminUser() {
      return request.auth != null &&
             exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    function isAuthenticated() {
      return request.auth != null;
    }
  }
}
